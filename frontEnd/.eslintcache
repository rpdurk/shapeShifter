[{"C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\index.js":"1","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\reportWebVitals.js":"2","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\App.js":"3","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\pages\\gamepage.js":"4","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\gamecontroller.js":"5","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\gamepiece.js":"6","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\square.js":"7","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\lpiece.js":"8","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\reverselpiece.js":"9","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\squarepiece.js":"10","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\tpiece.js":"11","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\linepiece.js":"12","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\spiece.js":"13","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\zpiece.js":"14","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\utils\\util.js":"15"},{"size":500,"mtime":1612406742326,"results":"16","hashOfConfig":"17"},{"size":362,"mtime":1612406742329,"results":"18","hashOfConfig":"17"},{"size":245,"mtime":1615426271794,"results":"19","hashOfConfig":"17"},{"size":452,"mtime":1615431907118,"results":"20","hashOfConfig":"17"},{"size":9854,"mtime":1615432018677,"results":"21","hashOfConfig":"17"},{"size":4501,"mtime":1614827183100,"results":"22","hashOfConfig":"17"},{"size":621,"mtime":1615431366060,"results":"23","hashOfConfig":"17"},{"size":2203,"mtime":1614827266885,"results":"24","hashOfConfig":"17"},{"size":2189,"mtime":1614827118555,"results":"25","hashOfConfig":"17"},{"size":916,"mtime":1614827108769,"results":"26","hashOfConfig":"17"},{"size":2292,"mtime":1614827129196,"results":"27","hashOfConfig":"17"},{"size":1446,"mtime":1614827176803,"results":"28","hashOfConfig":"17"},{"size":2293,"mtime":1614827122954,"results":"29","hashOfConfig":"17"},{"size":2270,"mtime":1614827132733,"results":"30","hashOfConfig":"17"},{"size":619,"mtime":1614825176680,"results":"31","hashOfConfig":"17"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},"1k15rg8",{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"34"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"43","messages":"44","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"45","usedDeprecatedRules":"34"},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"34"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"34"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"54","usedDeprecatedRules":"34"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"57","usedDeprecatedRules":"34"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"60","usedDeprecatedRules":"34"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"63","usedDeprecatedRules":"34"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"34"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"34"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"72"},"C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\index.js",[],["73","74"],"C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\reportWebVitals.js",[],"C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\App.js",[],"C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\pages\\gamepage.js",["75"],"C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\gamecontroller.js",["76","77","78","79","80","81","82","83","84","85","86"],"C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\gamepiece.js",["87","88","89"],"import Util from '../utils/util';\nimport ROTATION_STATE from './gamecontroller';\n\nclass GamePiece {\n  // TODO reconcile gameController and gameDataContext, should only need one\n  constructor(type, x, gameController, gameDataContext, color, playerToken) {\n    this.type = type;\n    this.x = x;\n    this.gameDataContext = gameDataContext;\n    this.color = color;\n    this.rotationState = ROTATION_STATE.ONE\n    this.playerToken = playerToken;\n  }\n\n  generateSquares() {\n    let squares = [];\n    for (let i= 0; i <= 3; i++) {\n      squares.push({playerToken: this.playerToken\n      })\n    }\n    return this.initializePosition(squares)\n  }\n\n  update() {\n    this.moveDown();\n  }\n\n  moveLeft() {\n    let nextState = this.leftShift(this.squares);\n    if (this.willCollide(nextState)) {\n      return;\n    }\n\n    this.squares = nextState;\n  }\n\n  moveRight() {\n    let nextState = this.rightShift(this.squares);\n    if (this.willCollide(nextState)) {\n      return;\n    }\n\n    this.squares = nextState;\n  }\n\n  moveDown() {\n    let nextState = this.downShift(this.squares);\n    if (this.willCollide(nextState)) {\n      return;\n    }\n\n    this.squares = nextState;\n  }\n\n  rotateClockwise() {\n    const nextClockwiseRotatedState = this.getNextClockwiseRotatedState();\n    let collisionResult = this.checkCollisionsAndProvideUpdatedState(\n        nextClockwiseRotatedState.nextState);\n    if (collisionResult.canApplyNextState) {\n      this.squares = collisionResult.nextState;\n      this.rotationState = nextClockwiseRotatedState.nextRotationState;\n    }\n\n    return;\n  }\n\n  shouldLockPiece() {\n    return this.willCollide(this.downShift(this.squares));\n  }\n\n  lockPiece() {\n    this.squares.forEach(square => {\n      this.gameDataContext.squares[square.i][square.j] = {\n        isEmpty: false,\n        persistThoughNextRender: true,\n        color: this.color\n      }\n    });\n  }\n\n  checkCollisionsAndProvideUpdatedState(state) {\n    let canApplyNextState = true;\n    let nextState = state;\n\n    if (this.willCollide(state)) {\n      // try shifting right\n      if (!this.willCollide(this.rightShift(state))) {\n        nextState = this.rightShift(state);\n      }\n      // try shifting left\n      else if (!this.willCollide(this.leftShift(state))) {\n        nextState = this.leftShift(state);\n      }\n\n      // try shifting up\n      else if(!this.willCollide(this.upShift(state))) {\n        nextState = this.upShift(state);\n      }\n\n      // try shifting down\n      else if(!this.willCollide(this.upShift(state))) {\n        nextState = this.upShift(state);\n      } else {\n        canApplyNextState = false;\n      }\n    }\n\n    return {\n      canApplyNextState: canApplyNextState,\n      nextState: nextState\n    };\n  }\n\n  willCollide(state, isSpawn) {\n    var collision = false;\n    state.forEach(square => {\n      let i = square.i;\n      let j = square.j;\n\n      if ((!isSpawn) && (this.ownsPiece(i, j))) {\n      }\n      // check out of bounds\n      else if (i < 0\n          || i >= this.gameDataContext.squares.length\n          || j < 0\n          || j >= this.gameDataContext.squares[0].length) {\n        collision = true;\n      }\n\n      // check square is not empty and is not of current piece\n      else if (\n          this.gameDataContext.squares[i][j].isEmpty == false\n      ) {\n        collision = true;\n      }\n    });\n    return collision;\n  }\n\n  ownsPiece(i, j) {\n    let owns = false;\n    this.squares.forEach(square => {\n      if (square.i == i && square.j == j ) {\n        owns = true;\n      }\n    });\n    return owns;\n  }\n\n  rightShift(state) {\n    let copy = Util.deepCopyArray(state);\n    for(let i = 0; i < copy.length; i++) {\n      copy[i].j += 1;\n    }\n    return copy;\n  }\n\n  leftShift(state) {\n    let copy = Util.deepCopyArray(state);\n    for(let i = 0; i < copy.length; i++) {\n      copy[i].j -= 1;\n    }\n    return copy;\n  }\n\n  upShift(state) {\n    let copy = Util.deepCopyArray(state);\n    for(let i = 0; i < copy.length; i++) {\n      copy[i].i -= 1;\n    }\n    return copy;\n  }\n\n  downShift(state) {\n    let copy = Util.deepCopyArray(state);\n    for(let i = 0; i < copy.length; i++) {\n      copy[i].i += 1;\n    }\n    return copy;\n  }\n\n  updateDataContext(state) {\n    this.squares.forEach(square => {\n\n      // errors when i is out of gamedata context bounds\n      // should not allow i to be at that value when this method is called\n\n      this.gameDataContext.squares[square.i][square.j] = {\n        isEmpty: false,\n        color: this.color\n      }\n    });\n  }\n}\n\nexport default GamePiece;","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\square.js",["90"],"import COLORS from './gamecontroller';\r\nimport SIZE from './gamecontroller';\r\n\r\nclass Square {\r\n    constructor(color, x, y, ctx) {\r\n        this.color1 = color;\r\n        this.color2 = COLORS[color];\r\n        this.ctx = ctx;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.size = SIZE;\r\n    }\r\n\r\n    render() {\r\n        const size = this.size;\r\n        this.ctx.fillStyle = this.color1;\r\n        this.ctx.fillRect(this.x, this.y, this.size, this.size);\r\n        this.ctx.fillStyle = this.color2;\r\n        this.ctx.fillRect(this.x + 4, this.y + 4, this.size - 8, this.size - 8);\r\n    }\r\n}\r\n\r\nexport default Square;","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\lpiece.js",["91","92","93"],"import GamePiece from '../gamepiece';\nimport Util from '../../utils/util';\nimport ROTATION_STATE from '../gamecontroller';\nimport PIECE_TYPES from '../gamecontroller';\n\nclass LPiece extends GamePiece {\n  constructor(x, gameController, dataContext, color, playerToken) {\n    super(PIECE_TYPES.L_PIECE, x, gameController, dataContext, color, playerToken);\n    this.squares = this.generateSquares();\n  }\n\n  initializePosition(squares) {\n    // [0] represents top the L piece\n    squares[0].i = 0;\n    squares[0].j = this.x;\n    squares[1].i = 1;\n    squares[1].j = this.x;\n    squares[2].i = 2;\n    squares[2].j = this.x;\n    squares[3].i = 2;\n    squares[3].j = this.x +1;\n    return squares;\n  }\n\n  getNextClockwiseRotatedState() {\n    var nextState = Util.deepCopyArray(this.squares);\n    var nextRotationState = null;\n\n    if (this.rotationState == ROTATION_STATE.ONE) {\n      // update top piece\n      nextState[0].i += 1;\n      nextState[0].j += 1;\n\n      // update bottom left\n      nextState[2].i -= 1;\n      nextState[2].j -= 1;\n\n      // update bottom right\n      nextState[3].j -= 2;\n\n      nextRotationState = ROTATION_STATE.TWO;\n    } else if (this.rotationState == ROTATION_STATE.TWO) {\n      // update top piece\n      nextState[0].i += 1;\n      nextState[0].j -= 1;\n\n      // update bottom left\n      nextState[2].i -= 1;\n      nextState[2].j += 1;\n\n      // update bottom right\n      nextState[3].i -= 2;\n\n      nextRotationState = ROTATION_STATE.THREE;\n    } else if (this.rotationState == ROTATION_STATE.THREE) {\n      // update top piece\n      nextState[0].i -= 1;\n      nextState[0].j -= 1;\n\n      // update bottom left\n      nextState[2].i += 1;\n      nextState[2].j += 1;\n\n      // update bottom right\n      nextState[3].j += 2;\n\n      nextRotationState = ROTATION_STATE.FOUR;\n    } else {\n      // update top piece\n      nextState[0].i -= 1;\n      nextState[0].j += 1;\n\n      // update bottom left\n      nextState[2].i += 1;\n      nextState[2].j -= 1;\n\n      // update bottom right\n      nextState[3].i += 2;\n\n      nextRotationState = ROTATION_STATE.ONE;\n    }\n\n    return {\n      nextState: nextState,\n      nextRotationState: nextRotationState\n    };\n  }\n}\n\nexport default LPiece;","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\reverselpiece.js",["94","95","96"],"import GamePiece from '../gamepiece';\r\nimport Util from '../../utils/util';\r\nimport ROTATION_STATE from '../gamecontroller';\r\nimport PIECE_TYPES from '../gamecontroller';\r\n\r\nclass ReverseLPiece extends GamePiece {\r\n    constructor(x, gameController, dataContext, color, playerToken) {\r\n        super(PIECE_TYPES.REVERSE_L_PIECE, x, gameController, dataContext, color, playerToken);\r\n        this.squares = this.generateSquares();\r\n    }\r\n\r\n    initializePosition(squares) {\r\n        // [0] represents top the reverse L piece\r\n        squares[0].i = 0;\r\n        squares[0].j = this.x;\r\n        squares[1].i = 1;\r\n        squares[1].j = this.x;\r\n        squares[2].i = 2;\r\n        squares[2].j = this.x;\r\n        squares[3].i = 2;\r\n        squares[3].j = this.x -1;\r\n        return squares;\r\n      }\r\n     \r\n    getNextClockwiseRotatedState() {\r\n        var nextState = Util.deepCopyArray(this.squares);\r\n        var nextRotationState = null;\r\n\r\n        if (this.rotationState == ROTATION_STATE.ONE) {\r\n        // update top piece\r\n        nextState[0].i -= 1;\r\n        nextState[0].j -= 1;\r\n\r\n        // update bottom right\r\n        nextState[2].i += 1;\r\n        nextState[2].j += 1;\r\n\r\n        // update bottom left\r\n        nextState[3].j += 2;\r\n\r\n            nextRotationState = ROTATION_STATE.TWO;\r\n        } else if (this.rotationState == ROTATION_STATE.TWO) {\r\n      // update top piece\r\n      nextState[0].i -= 1;\r\n      nextState[0].j -= 1;\r\n\r\n      // update bottom right\r\n      nextState[2].i += 1;\r\n      nextState[2].j -= 1;\r\n\r\n      // update bottom right\r\n      nextState[3].j += 2;\r\n\r\n            nextRotationState = ROTATION_STATE.THREE;\r\n        } else if (this.rotationState == ROTATION_STATE.THREE) {\r\n            nextState[0].i += 1;\r\n            nextState[0].j += 1;\r\n      \r\n            // update bottom left\r\n            nextState[2].i -= 1;\r\n            nextState[2].j -= 1;\r\n      \r\n            // update bottom right\r\n            nextState[3].i -= 2;\r\n\r\n            nextRotationState = ROTATION_STATE.ONE;\r\n        }\r\n\r\n    return {\r\n        nextState: nextState,\r\n        nextRotationState: nextRotationState\r\n        };\r\n    }\r\n}\r\n\r\nexport default ReverseLPiece;","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\squarepiece.js",["97"],"import GamePiece from '../gamepiece';\nimport Util from '../../utils/util';\nimport ROTATION_STATE from '../gamecontroller';\nimport PIECE_TYPES from '../gamecontroller';\n\nclass SquarePiece extends GamePiece {\n  constructor(x, gameController, dataContext, color, playerToken) {\n    super(PIECE_TYPES.SQ_PIECE, x, gameController, dataContext, color, playerToken);\n    this.squares = this.generateSquares();\n  }\n\n  initializePosition(squares) {\n    squares[0].i = 0;\n    squares[0].j = this.x;\n    squares[1].i = 0;\n    squares[1].j = this.x +1;\n    squares[2].i = 1;\n    squares[2].j = this.x;\n    squares[3].i = 1;\n    squares[3].j = this.x +1;\n    return squares;\n  }\n\n  getNextClockwiseRotatedState() {\n    var nextState = Util.deepCopyArray(this.squares);\n    var nextRotationState = null;\n    return {\n      nextState: nextState,\n      nextRotationState: ROTATION_STATE.ONE\n    };\n  }\n}\n\nexport default SquarePiece;","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\tpiece.js",["98","99","100"],"import GamePiece from '../gamepiece';\nimport Util from '../../utils/util';\nimport ROTATION_STATE from '../gamecontroller';\nimport PIECE_TYPES from '../gamecontroller';\n\nclass TPiece extends GamePiece {\n  constructor(x, gameController, dataContext, color, playerToken) {\n    super(PIECE_TYPES.T_PIECE, x, gameController, dataContext, color, playerToken);\n    this.squares = this.generateSquares();\n  }\n\n  initializePosition(squares) {\n    squares[0].i = 0;\n    squares[0].j = this.x -1;\n    squares[1].i = 0;\n    squares[1].j = this.x;\n    squares[2].i = 0;\n    squares[2].j = this.x +1;\n    squares[3].i = 1;\n    squares[3].j = this.x;\n    return squares;\n  }\n\n  getNextClockwiseRotatedState() {\n    var nextState = Util.deepCopyArray(this.squares);\n    var nextRotationState = null;\n\n    if (this.rotationState == ROTATION_STATE.ONE) {\n      // update left square\n      nextState[0].i -= 1;\n      nextState[0].j += 1;\n\n      // update right square\n      nextState[2].i += 1;\n      nextState[2].j -= 1;\n\n      // update bottom square\n      nextState[3].i -= 1;\n      nextState[3].j -= 1;\n\n      nextRotationState = ROTATION_STATE.TWO;\n    } else if (this.rotationState == ROTATION_STATE.TWO) {\n      // update left square\n      nextState[0].i += 1;\n      nextState[0].j += 1;\n\n      // update right square\n      nextState[2].i -= 1;\n      nextState[2].j -= 1;\n\n      // update bottom square\n      nextState[3].i -= 1;\n      nextState[3].j += 1;\n\n      nextRotationState = ROTATION_STATE.THREE;\n    } else if (this.rotationState == ROTATION_STATE.THREE) {\n      // update left square\n      nextState[0].i += 1;\n      nextState[0].j -= 1;\n\n      // update right square\n      nextState[2].i -= 1;\n      nextState[2].j += 1;\n\n      // update bottom square\n      nextState[3].i += 1;\n      nextState[3].j += 1;\n\n      nextRotationState = ROTATION_STATE.FOUR;\n    } else {\n      // update left square\n      nextState[0].i -= 1;\n      nextState[0].j -= 1;\n\n      // update right square\n      nextState[2].i += 1;\n      nextState[2].j += 1;\n\n      // update bottom square\n      nextState[3].i += 1;\n      nextState[3].j -= 1;\n\n      nextRotationState = ROTATION_STATE.ONE;\n    }\n\n    return {\n      nextState: nextState,\n      nextRotationState: nextRotationState\n    };\n  }\n}\n\nexport default TPiece;","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\linepiece.js",["101","102"],"import GamePiece from '../gamepiece';\nimport Util from '../../utils/util';\nimport ROTATION_STATE from '../gamecontroller';\nimport PIECE_TYPES from '../gamecontroller';\n\n\nclass LinePiece extends GamePiece {\n  constructor(x, gameController, dataContext, color, playerToken) {\n    super(PIECE_TYPES.T_PIECE, x, gameController, dataContext, color, playerToken);\n    this.squares = this.generateSquares();\n  }\n\n  initializePosition(squares) {\n    squares[0].i = 0;\n    squares[0].j = this.x;\n    squares[1].i = 1;\n    squares[1].j = this.x;\n    squares[2].i = 2;\n    squares[2].j = this.x;\n    squares[3].i = 3;\n    squares[3].j = this.x;\n    return squares;\n  }\n\n  getNextClockwiseRotatedState() {\n    var nextState = Util.deepCopyArray(this.squares);\n    var nextRotationState = null;\n\n    if (this.rotationState == ROTATION_STATE.ONE) {\n      nextState[0].i += 1;\n      nextState[0].j += 1;\n\n      nextState[2].i -= 1;\n      nextState[2].j -= 1;\n\n      nextState[3].i -= 2;\n      nextState[3].j -= 2;\n\n      nextRotationState = ROTATION_STATE.TWO;\n    } else if (this.rotationState == ROTATION_STATE.TWO) {\n      nextState[0].i -= 1;\n      nextState[0].j -= 1;\n\n      nextState[2].i += 1;\n      nextState[2].j += 1;\n\n      nextState[3].i += 2;\n      nextState[3].j += 2;\n\n      nextRotationState = ROTATION_STATE.ONE;\n    }\n\n    return {\n      nextState: nextState,\n      nextRotationState: nextRotationState\n    };\n  }\n}\n\nexport default LinePiece;","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\spiece.js",["103","104","105"],"import GamePiece from '../gamepiece';\r\nimport Util from '../../utils/util';\r\nimport ROTATION_STATE from '../gamecontroller';\r\nimport PIECE_TYPES from '../gamecontroller';\r\n\r\nclass SPiece extends GamePiece {\r\n    constructor(x, gameController, dataContext, color, playerToken) {\r\n        super(PIECE_TYPES.S_PIECE, x, gameController, dataContext, color, playerToken);\r\n        this.squares = this.generateSquares();\r\n    }\r\n\r\n    initializePosition(squares) {\r\n        // [0] represents bottom left of s piece\r\n        squares[0].i = 0;\r\n        squares[0].j = this.x;\r\n        squares[1].i = 1;\r\n        squares[1].j = this.x;\r\n        squares[2].i = 1;\r\n        squares[2].j = this.x +1;\r\n        squares[3].i = 2;\r\n        squares[3].j = this.x +1;\r\n        return squares;\r\n      }\r\n\r\n    getNextClockwiseRotatedState() {\r\n        var nextState = Util.deepCopyArray(this.squares);\r\n        var nextRotationState = null;\r\n        console.log(nextRotationState);\r\n\r\n        if (this.rotationState == ROTATION_STATE.ONE) {\r\n            // update bottom left\r\n            nextState[0].i += 1;\r\n            nextState[0].j += 1;\r\n\r\n            // update top left\r\n            nextState[2].i += 1;\r\n            nextState[2].j -= 1;\r\n\r\n            // update top right\r\n            nextState[3].j -= 2;\r\n\r\n            nextRotationState = ROTATION_STATE.TWO;\r\n        } else if (this.rotationState == ROTATION_STATE.TWO) {\r\n            // update bottom left\r\n            nextState[0].i += 1;\r\n            nextState[0].j -= 1;\r\n\r\n            // update top left\r\n            nextState[2].i -= 1;\r\n            nextState[2].j -= 1;\r\n\r\n            // update top right\r\n            nextState[3].i -= 2;\r\n\r\n            nextRotationState = ROTATION_STATE.THREE;\r\n        } else if (this.rotationState == ROTATION_STATE.THREE) {\r\n            // update bottom left\r\n            nextState[0].i -= 1;\r\n            nextState[0].j -= 1;\r\n\r\n            // update top left\r\n            nextState[2].i -= 1;\r\n            nextState[2].j += 1;\r\n\r\n            // update top right\r\n            nextState[3].i -= 2;\r\n\r\n            nextRotationState = ROTATION_STATE.ONE;\r\n        }\r\n\r\n    return {\r\n        nextState: nextState,\r\n        nextRotationState: nextRotationState\r\n        };\r\n    }\r\n}\r\n\r\nexport default SPiece;","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\components\\pieces\\zpiece.js",["106","107","108"],"import GamePiece from '../gamepiece';\r\nimport Util from '../../utils/util';\r\nimport ROTATION_STATE from '../gamecontroller';\r\nimport PIECE_TYPES from '../gamecontroller';\r\n\r\nclass ZPiece extends GamePiece {\r\n    constructor(x, gameController, dataContext, color, playerToken) {\r\n        super(PIECE_TYPES.Z_PIECE, x, gameController, dataContext, color, playerToken);\r\n        this.squares = this.generateSquares();\r\n    }\r\n\r\n    initializePosition(squares) {\r\n        // [0] represents top left of z\r\n        squares[0].i = 0;\r\n        squares[0].j = this.x;\r\n        squares[1].i = 0;\r\n        squares[1].j = this.x -1;\r\n        squares[2].i = 1;\r\n        squares[2].j = this.x -1;\r\n        squares[3].i = 1;\r\n        squares[3].j = this.x -2;\r\n        return squares;\r\n      }\r\n\r\n    getNextClockwiseRotatedState() {\r\n        var nextState = Util.deepCopyArray(this.squares);\r\n        var nextRotationState = null;\r\n\r\n        if (this.rotationState == ROTATION_STATE.ONE) {\r\n            // update top piece\r\n            nextState[0].i += 1;\r\n            nextState[0].j += 1;\r\n\r\n            // update bottom left\r\n            nextState[2].i -= 1;\r\n            nextState[2].j += 1;\r\n\r\n            // update bottom right\r\n            nextState[3].i -= 2;\r\n\r\n            nextRotationState = ROTATION_STATE.TWO;\r\n        } else if (this.rotationState == ROTATION_STATE.TWO) {\r\n            // update top piece\r\n            nextState[0].i += 1;\r\n            nextState[0].j -= 1;\r\n\r\n            // update bottom left\r\n            nextState[2].i += 1;\r\n            nextState[2].j += 1;\r\n\r\n            // update bottom right\r\n            nextState[3].j += 2;\r\n\r\n            nextRotationState = ROTATION_STATE.THREE;\r\n        } else if (this.rotationState == ROTATION_STATE.THREE) {\r\n            // update top piece\r\n            nextState[0].i -= 1;\r\n            nextState[0].j -= 1;\r\n\r\n            // update bottom left\r\n            nextState[2].i += 1;\r\n            nextState[2].j -= 1;\r\n\r\n            // update bottom right\r\n            nextState[3].i += 2;\r\n\r\n            nextRotationState = ROTATION_STATE.ONE;\r\n        }\r\n\r\n        return {\r\n            nextState: nextState,\r\n            nextRotationState: nextRotationState\r\n        };\r\n    }\r\n}\r\n\r\nexport default ZPiece;","C:\\Users\\Ryan Durk\\bootcamp\\homework\\shapeShifter\\frontEnd\\src\\utils\\util.js",[],["109","110"],{"ruleId":"111","replacedBy":"112"},{"ruleId":"113","replacedBy":"114"},{"ruleId":"115","severity":1,"message":"116","line":5,"column":3,"nodeType":"117","messageId":"118","endLine":7,"endColumn":4},{"ruleId":"119","severity":1,"message":"120","line":94,"column":14,"nodeType":"121","messageId":"122","endLine":94,"endColumn":16},{"ruleId":"119","severity":1,"message":"120","line":96,"column":21,"nodeType":"121","messageId":"122","endLine":96,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":98,"column":21,"nodeType":"121","messageId":"122","endLine":98,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":100,"column":21,"nodeType":"121","messageId":"122","endLine":100,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":102,"column":21,"nodeType":"121","messageId":"122","endLine":102,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":104,"column":21,"nodeType":"121","messageId":"122","endLine":104,"endColumn":23},{"ruleId":"119","severity":1,"message":"120","line":166,"column":28,"nodeType":"121","messageId":"122","endLine":166,"endColumn":30},{"ruleId":"119","severity":1,"message":"120","line":195,"column":28,"nodeType":"121","messageId":"122","endLine":195,"endColumn":30},{"ruleId":"123","severity":1,"message":"124","line":198,"column":14,"nodeType":"125","messageId":"126","endLine":198,"endColumn":15},{"ruleId":"127","severity":1,"message":"128","line":244,"column":5,"nodeType":"129","messageId":"130","endLine":264,"endColumn":6},{"ruleId":"127","severity":1,"message":"128","line":268,"column":5,"nodeType":"129","messageId":"130","endLine":277,"endColumn":6},{"ruleId":"119","severity":1,"message":"120","line":132,"column":54,"nodeType":"121","messageId":"122","endLine":132,"endColumn":56},{"ruleId":"119","severity":1,"message":"120","line":143,"column":20,"nodeType":"121","messageId":"122","endLine":143,"endColumn":22},{"ruleId":"119","severity":1,"message":"120","line":143,"column":37,"nodeType":"121","messageId":"122","endLine":143,"endColumn":39},{"ruleId":"131","severity":1,"message":"132","line":15,"column":15,"nodeType":"125","messageId":"133","endLine":15,"endColumn":19},{"ruleId":"119","severity":1,"message":"120","line":29,"column":28,"nodeType":"121","messageId":"122","endLine":29,"endColumn":30},{"ruleId":"119","severity":1,"message":"120","line":42,"column":35,"nodeType":"121","messageId":"122","endLine":42,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":55,"column":35,"nodeType":"121","messageId":"122","endLine":55,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":29,"column":32,"nodeType":"121","messageId":"122","endLine":29,"endColumn":34},{"ruleId":"119","severity":1,"message":"120","line":42,"column":39,"nodeType":"121","messageId":"122","endLine":42,"endColumn":41},{"ruleId":"119","severity":1,"message":"120","line":55,"column":39,"nodeType":"121","messageId":"122","endLine":55,"endColumn":41},{"ruleId":"131","severity":1,"message":"134","line":26,"column":9,"nodeType":"125","messageId":"133","endLine":26,"endColumn":26},{"ruleId":"119","severity":1,"message":"120","line":28,"column":28,"nodeType":"121","messageId":"122","endLine":28,"endColumn":30},{"ruleId":"119","severity":1,"message":"120","line":42,"column":35,"nodeType":"121","messageId":"122","endLine":42,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":56,"column":35,"nodeType":"121","messageId":"122","endLine":56,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":29,"column":28,"nodeType":"121","messageId":"122","endLine":29,"endColumn":30},{"ruleId":"119","severity":1,"message":"120","line":40,"column":35,"nodeType":"121","messageId":"122","endLine":40,"endColumn":37},{"ruleId":"119","severity":1,"message":"120","line":30,"column":32,"nodeType":"121","messageId":"122","endLine":30,"endColumn":34},{"ruleId":"119","severity":1,"message":"120","line":43,"column":39,"nodeType":"121","messageId":"122","endLine":43,"endColumn":41},{"ruleId":"119","severity":1,"message":"120","line":56,"column":39,"nodeType":"121","messageId":"122","endLine":56,"endColumn":41},{"ruleId":"119","severity":1,"message":"120","line":29,"column":32,"nodeType":"121","messageId":"122","endLine":29,"endColumn":34},{"ruleId":"119","severity":1,"message":"120","line":42,"column":39,"nodeType":"121","messageId":"122","endLine":42,"endColumn":41},{"ruleId":"119","severity":1,"message":"120","line":55,"column":39,"nodeType":"121","messageId":"122","endLine":55,"endColumn":41},{"ruleId":"111","replacedBy":"135"},{"ruleId":"113","replacedBy":"136"},"no-native-reassign",["137"],"no-negated-in-lhs",["138"],"no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","no-redeclare","'i' is already defined.","Identifier","redeclared","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-unused-vars","'size' is assigned a value but never used.","unusedVar","'nextRotationState' is assigned a value but never used.",["137"],["138"],"no-global-assign","no-unsafe-negation"]